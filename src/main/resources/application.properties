spring.application.name=sharding-jdbc
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.database=mysql

# 所有库
sharding.jdbc.datasource.names=ds_0,ds_1

# ds_0
sharding.jdbc.datasource.ds_0.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.ds_0.driverClassName=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds_0.url=jdbc:mysql://127.0.0.1:3306/ds_0?useSSL=false
sharding.jdbc.datasource.ds_0.username=root
sharding.jdbc.datasource.ds_0.password=wsq123

# ds_1
sharding.jdbc.datasource.ds_1.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.ds_1.driverClassName=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds_1.url=jdbc:mysql://127.0.0.1:3306/ds_1?useSSL=false
sharding.jdbc.datasource.ds_1.username=root
sharding.jdbc.datasource.ds_1.password=wsq123

# 分库规则
sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=order_id
sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=ds_${order_id % 2}

# 分表规则
sharding.jdbc.config.sharding.tables.t_user.actualDataNodes=ds_${0..1}.t_user_${0..1}
sharding.jdbc.config.sharding.tables.t_user.tableStrategy.inline.shardingColumn=user_id
sharding.jdbc.config.sharding.tables.t_user.tableStrategy.inline.algorithmExpression=t_user_${user_id % 2}
# 使用user_id作为分布式主键
sharding.jdbc.config.sharding.tables.t_user.keyGeneratorColumnName=user_id

# 逻辑主从库名和实际主从库映射关系
#sharding.jdbc.config.sharding.master-slave-rules.ds_0.masterDataSourceName=ds_master_0
#sharding.jdbc.config.sharding.master-slave-rules.ds_0.slaveDataSourceNames=ds_master_0_slave_0, ds_master_0_slave_1
#sharding.jdbc.config.sharding.master-slave-rules.ds_1.masterDataSourceName=ds_master_1
#sharding.jdbc.config.sharding.master-slave-rules.ds_1.slaveDataSourceNames=ds_master_1_slave_0, ds_master_1_slave_1


server.port=8010
